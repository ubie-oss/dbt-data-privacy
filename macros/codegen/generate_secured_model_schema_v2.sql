{% macro generate_secured_model_schema_v2(
      target,
      name,
      database,
      schema,
      alias,
      description=none,
      columns={},
      tags=[],
      labels={}
    ) %}
  {{- return(adapter.dispatch('generate_secured_model_schema_v2', 'dbt_data_privacy')(
      target=target,
      name=name,
      database=database,
      schema=schema,
      alias=alias,
      description=description,
      columns=columns,
      tags=tags,
      labels=labels
    )) -}}
{% endmacro %}

{% macro default__generate_secured_model_schema_v2(
      target,
      name,
      database,
      schema,
      alias,
      description=none,
      columns=[],
      tags=[],
      labels={}
    ) %}

  {% if columns | length == 0 %}
    {{ exceptions.raise_compiler_error("No columns for {}".format(name)) }}
  {% endif %}

  {%- set config = dbt_data_privacy.get_data_privacy_config_by_target(target) %}
  {%- set data_handling_standards = config.get('data_handling_standards') %}
  {%- set secured_columns = dbt_data_privacy.get_secured_columns(data_handling_standards, columns) %}

  {%- set schema_yaml -%}
---
# This was automatically generated by the `dbt-data-privacy` package.
version: 2

models:
  - name: {{ name }}
    {% if description is not none -%}
    description: |
      {{ description }}
    {%- endif %}
    {% if tags | length > 0 -%}
    tags: {{ tags | unique | list }}
    {%- endif %}
    {% if labels | length > 0 -%}
    meta: {% for k, v in labels.items() %}
      {{ k }}: {{ v }}
    {%- endfor %}
    {%- endif %}
    tests:
      # The test enables us to show the schema YAML file to delete before re-generating the file.
      # A schema YAML file doesn't appear by `dbt ls --output path`, when it contains no tests.
      - dbt_data_privacy.dummy_test

    {% if columns | length > 0 -%}
    columns: {%- for column_name, column in columns.items() %}
      - name: {{ column.name }}
        description: |
          {{ column.description | default('', true) }}
        {%- if 'data_privacy' in column.meta and column.meta.data_privacy.level %}
        {%- set data_privacy_level = column.meta.data_privacy.level %}
        meta:
          data_privacy:
            {#- Think of the downgraded data security level #}
            level: {{ secured_columns.get(column_name, {}).get("level", column.meta.data_privacy.level) }}
        {%- endif %}
        {% if 'data_privacy' in column.meta
            and name in column.meta.data_privacy
            and 'tests' in column.meta.data_privacy[name]
            and column.meta.data_privacy[name].tests | length > 0 -%}
        tests: {% for test in column.meta.data_privacy[name].tests %}
          - {{ test }}
        {%- endfor %}
        {%- endif %}
    {%- endfor %}
    {%- endif %}
  {% endset %}

  {% do return(schema_yaml) %}
{% endmacro %}
