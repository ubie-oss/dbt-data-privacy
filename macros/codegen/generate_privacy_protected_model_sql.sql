{% macro generate_privacy_protected_model_sql(
    objective,
    materialized,
    database,
    schema,
    alias,
    reference,
    columns,
    adapter_config={},
    unknown_config={},
    where=none,
    relationships=none,
    tags=[],
    labels={},
    persist_docs={"relation": true, "columns": true},
    docs=none,
    enabled=True,
    full_refresh=none
  ) %}

  {{- return(adapter.dispatch('generate_privacy_protected_model_sql', 'dbt_data_privacy')(
      objective=objective,
      materialized=materialized,
      database=database,
      schema=schema,
      alias=alias,
      tags=tags,
      labels=labels,
      persist_docs=persist_docs,
      docs=docs,
      adapter_config=adapter_config,
      unknown_config=unknown_config,
      reference=reference,
      columns=columns,
      where=where,
      relationships=relationships,
      enabled=enabled,
      full_refresh=full_refresh,
      **kwargs )) -}}
{% endmacro %}

{% macro bigquery__generate_privacy_protected_model_sql(
    objective,
    materialized,
    database,
    schema,
    alias,
    reference,
    columns,
    adapter_config={},
    unknown_config={},
    where=none,
    tags=[],
    labels={},
    persist_docs={"relation": true, "columns": true},
    docs=none,
    relationships=none,
    enabled=True,
    full_refresh=none
  ) %}

  {% if columns | length == 0 %}
    {{ exceptions.raise_compiler_error("No columns for {}.{}.{}".format(database, schema, alias)) }}
  {% endif %}

  {%- set config = dbt_data_privacy.get_data_privacy_config_by_objective(objective) %}
  {%- set data_handling_standards = config.get('data_handling_standards') %}
  {%- set restructured_columns = dbt_data_privacy.get_secured_columns_v2(data_handling_standards, columns) %}

  {% if restructured_columns | length == 0 %}
    {{ exceptions.raise_compiler_error("no restructured columns in {}.{}.{}".format(database, schema, alias)) }}
  {% endif %}

  {# Generate a model SQL #}
  {%- set model_sql -%}
-- This was automatically generated by the `dbt-data-privacy` package.
-- noqa: disable=all
{{'{{'}}
  config(
    materialized={{- dbt_data_privacy.safe_quote(materialized) -}},
    database={{- dbt_data_privacy.safe_quote(database) -}},
    schema={{- dbt_data_privacy.safe_quote(schema) -}},
    alias={{- dbt_data_privacy.safe_quote(alias) -}},
    {% if "grant_access_to" in adapter_config -%}
    grant_access_to=[
      {%- for x in adapter_config["grant_access_to"] %}
      {
        {%- if "project" in x and "dataset" in x %}
        "project": {{ dbt_data_privacy.safe_quote(x.get("project")) }},
        "dataset": {{ dbt_data_privacy.safe_quote(x.get("dataset")) }},
        {%- elif "database" in x and "schema" in x %}
        "project": {{ dbt_data_privacy.safe_quote(x.get("database")) }},
        "dataset": {{ dbt_data_privacy.safe_quote(x.get("schema")) }},
        {%- else %}
          {% do exceptions.raise_compiler_error("unexpected grant_access_to: {}".format(x)) %}
        {%- endif %}
      },
      {%- endfor %}
    ],
    {%- endif %}
    {%- if "partition_by" in adapter_config %}
    partition_by={
      "field": {{ dbt_data_privacy.safe_quote(adapter_config["partition_by"]["field"]) }},
      "data_type": {{ dbt_data_privacy.safe_quote(adapter_config["partition_by"]["data_type"]) }},
      "granularity": {{ dbt_data_privacy.safe_quote(adapter_config["partition_by"]["granularity"]) }},
    },
    {%- endif %}
    {%- if "cluster_by" in adapter_config %}
    cluster_by={{ adapter_config["cluster_by"] }},
    {%- endif %}
    tags={{ tags | unique | sort }},
    labels={
      {% for k, v in labels.items() -%}
      {{ '"' ~ k ~ '"' }}: {{ dbt_data_privacy.safe_quote(v) }},
      {%- endfor %}
    },
    {%- for k, v in unknown_config.items() %}
    {{ k }}={{ dbt_data_privacy.safe_quote(v) }},
    {%- endfor %}
    persist_docs={{ persist_docs }},
    {%- if docs is not none and docs is mapping %}
    docs={{ docs }},
    {%- endif %}
    full_refresh={{ full_refresh }},
    enabled={{ enabled }}
  )
{{'}}'}}

WITH privacy_protected_model AS (
  SELECT
    {%- for top_level_column_name, top_level_restructured_column in restructured_columns.items() %}
    {%- set expression = dbt_data_privacy.convert_restructured_column_to_expression(top_level_column_name, top_level_restructured_column) %}
    {%- if expression is not none %}
    {{ expression }},
    {%- endif %}
    {%- endfor %}
  FROM
    {%- if dbt_data_privacy.is_macro_expression(reference) %}
    {{ '{{ ' ~ reference ~ ' }}'}} AS __original_table
    {%- else %}
    {{ reference }} AS __original_table
    {%- endif %}
  {%- if where is not none %}
  WHERE
    {{ where }}
  {%- endif %}
)
{%- if relationships is not none and dbt_data_privacy.validate_relationships(relationships)  -%}
{%- for i in range(relationships | length) %}
, __relationships_{{ i }} AS (
  SELECT *
  FROM {{ '{{ ' ~ relationships[i]["to"] ~ ' }}' }} AS __relationships_{{ i }}
  {%- if "where" in relationships[i] %}
  WHERE
    {{ relationships[i]["where"] }}
  {%- endif %}
)
{%- endfor %}
{%- endif %}

SELECT
  __source.*,
FROM privacy_protected_model AS __source

{%- if relationships is not none and dbt_data_privacy.validate_relationships(relationships)  -%}
{%- for i in range(relationships | length) %}
JOIN __relationships_{{ i }}
  ON {% for k, v in relationships[i]["fields"].items() -%}
    {%- if not loop.first -%}AND {% endif -%}
    __source.{{- k }} = __relationships_{{- i -}}.{{- v }}
  {%- endfor %}
{%- endfor %}
{%- endif %}
  {%- endset %}

  {{ return(model_sql) }}
{% endmacro %}
