{% macro generate_privacy_protected_model_sql(
    materialized,
    database,
    schema,
    alias,
    reference,
    columns,
    adapter_config={},
    unknown_config={},
    where=none,
    relationships=none,
    tags=[],
    labels={},
    persist_docs={"relation": true, "columns": true},
    enabled=True,
    full_refresh=none
  ) %}
  {{- return(adapter.dispatch('generate_privacy_protected_model_sql', 'dbt_data_privacy')(
      materialized=materialized,
      database=database,
      schema=schema,
      alias=alias,
      tags=tags,
      labels=labels,
      persist_docs=persist_docs,
      adapter_config=adapter_config,
      unknown_config=unknown_config,
      reference=reference,
      columns=columns,
      where=where,
      relationships=relationships,
      enabled=enabled,
      full_refresh=full_refresh,
      **kwargs )) -}}
{% endmacro %}

{% macro bigquery__generate_privacy_protected_model_sql(
    materialized,
    database,
    schema,
    alias,
    reference,
    columns,
    adapter_config={},
    unknown_config={},
    where=none,
    tags=[],
    labels={},
    persist_docs={"relation": true, "columns": true},
    relationships=none,
    enabled=True,
    full_refresh=none
  ) %}

  {% if columns | length == 0 %}
    {# TODO raise an error #}
  {% endif %}

  {# Generate a model SQL #}
  {%- set model_sql %}
-- This was automatically generated by the `dbt-data-privacy` package.
{{'{{'}}
  config(
    materialized={{- dbt_data_privacy.safe_quote(materialized) -}},
    database={{- dbt_data_privacy.safe_quote(database) -}},
    database={{- dbt_data_privacy.safe_quote(schema) -}},
    alias={{- dbt_data_privacy.safe_quote(alias) -}},
    {% if "grant_access_to" in adapter_config -%}
    grant_access_to=[
      {% for x in adapter_config["grant_access_to"] -%}
      {
        "project": {{ dbt_data_privacy.safe_quote(x.get("project")) }},
        "dataset": {{ dbt_data_privacy.safe_quote(x.get("dataset")) }}
      },
      {% endfor -%}
    ],{%- endif %}
    tags={{ tags }},
    labels={
      {% for k, v in labels.items() -%}
      {{ '"' ~ k ~ '"' }}: {{ dbt_data_privacy.safe_quote(v) }},
      {%- endfor %}
    },
    {% for k, v in unknown_config.items() -%}
    {{ k }}={{ dbt_data_privacy.safe_quote(v) }},
    {%- endfor %}
    persist_docs={{ persist_docs }},
    full_refresh={{ full_refresh }},
    enabled={{ enabled }}
  )
{{'}}'}}

WITH privacy_protected_model AS (
  SELECT
    {%- for column_name, column_info in columns.items() -%}
      {%- if "data_privacy" in column_info.meta and column_info.meta.data_privacy.level %}
        {% set expression = dbt_data_privacy.get_secured_expression(column_name, column_info.meta.data_privacy.level) %}
        {%- if expression is not none -%}
          {{ expression }} AS `{{- column_name -}}`,
        {%- endif -%}
      {%- endif -%}
    {%- endfor %}
  FROM
    {% if dbt_data_privacy.is_macro_expression(reference) -%}
    {{ '{{ ' ~ reference ~ ' }}'}}
    {% else -%}
    {{ reference }}
    {%- endif %}
  {% if where is not none -%}
  WHERE
    {{ where }}
  {% endif -%}
)

SELECT
  source.*,
FROM privacy_protected_model AS source
{% if relationships is not none and dbt_data_privacy.validate_relationships(relationships)  -%}
JOIN {{ '{{ ' ~ relationships["to"] ~ ' }}' }} AS target
  ON {% for k, v in relationships["fields"].items() -%}
    {%- if not loop.first -%}AND {% endif -%}
    source.{{ k }} = target.{{ v }}
  {% endfor -%}
{% if "where" in relationships and relationships["where"] | length > 0 -%}
WHERE
  {{ relationships["where"] }}
{%- endif %}
{%- endif %}
  {% endset %}

  {{- return(model_sql) -}}
{% endmacro %}
