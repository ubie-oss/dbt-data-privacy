#!/bin/bash
set -x

# Arguments
dbt_profile="default"
default_tag="dbt_data_privacy"
delete_before="1"
verbose="1"
while (($# > 0))
do
  if [[ "$1" == "--dbt-models-dir" ]]; then
    dbt_models_dir="${2}"
    shift 2
  elif [[ "$1" == "--dbt-profiles-dir" ]]; then
    dbt_profiles_dir="${2}"
    shift 2
  elif [[ "$1" == "--dbt-profile" ]]; then
    dbt_profile="${2}"
    shift 2
  elif [[ "$1" == "--dbt-target" ]]; then
    dbt_target="${2}"
    shift 2
  elif [[ "$1" == "--dbt-vars-path" ]]; then
    dbt_vars_path="${2}"
    shift 2
  elif [[ "$1" == "--dbt-data-privacy-tag" ]]; then
    default_tag="${2}"
    shift 2
  elif [[ "$1" == "--delete-before" ]]; then
    delete_before="${2}"
    shift 2
  elif [[ "$1" == "--verbose" ]]; then
    verbose="${2}"
    shift 2
  fi
done

# Turn off verbose
if [[ "$verbose" != "1" ]] ; then
  set +x
fi

#
# main
#
# Fail fast on errors, unset variables, and failures in piped commands
set -Eeuo pipefail

if [[ -n "${dbt_vars_path+x}" ]]; then
  dbt_vars="$(cat "${dbt_vars_path:?}")"
fi

# Remove dbt models generated by data_privacy to remove disabled models.
echo '::group::Delete dbt models generated by dbt-data-privacy ahead of time'
set +Eeuo pipefail

if [[ "$delete_before" == "1" ]] ; then
  # shellcheck disable=SC2046
  generated_files="$(dbt --quiet ls \
      $(if [[ -n "${dbt_profiles_dir+x}" ]]; then echo "--profiles-dir \'${dbt_profiles_dir:?}\'"; fi) \
      $(if [[ -n "${dbt_profile+x}" ]]; then echo "--profile \'${dbt_profile:?}\'"; fi) \
      $(if [[ -n "${dbt_target+x}" ]]; then echo "--target \'${dbt_target:?}\'"; fi) \
      $(if [[ -n "${dbt_vars+x}" ]]; then echo "--vars \'${dbt_vars:?}\'"; fi) \
      --select "\'tag:${default_tag:?}\'" \
      --output path)"
  for generated_file in $generated_files
  do
    if [[ -e "$generated_file" ]] ; then
      rm -f "$generated_file"
      echo "delete ${generated_file}"
    fi
  done
fi

set -Eeuo pipefail
echo '::endgroup::'

# Generate dbt models.
echo '::group::Generate dbt models with dbt-data-privacy'
set +Eeuo pipefail

# Get information about generated models
# shellcheck disable=SC2046
generated_models_json="$(dbt --quiet run-operation "dbt_data_privacy.generate_privacy_protected_models" \
      $(if [[ -n "${dbt_profiles_dir+x}" ]]; then echo "--profiles-dir \'${dbt_profiles_dir:?}\'"; fi) \
      $(if [[ -n "${dbt_profile+x}" ]]; then echo "--profile \'${dbt_profile:?}\'"; fi) \
      $(if [[ -n "${dbt_target+x}" ]]; then echo "--target \'${dbt_target:?}\'"; fi) \
      $(if [[ -n "${dbt_vars+x}" ]]; then echo "--vars \'${dbt_vars:?}\'"; fi))"
echo "::set-output name=generated-models-json::${generated_models_json}"

# Generate models
# shellcheck disable=SC2034
echo "$generated_models_json" \
  | jq -r -c '.[]' \
  | while read -r generated_model
    do
      # Get generated features
      name="$(echo "$generated_model" | jq -r '.meta.name')"
      database="$(echo "$generated_model" | jq -r '.meta.config.database')"
      database_alias="$(echo "$generated_model" | jq -r '.meta.extra_meta.database_alias')"
      schema="$(echo "$generated_model" | jq -r '.meta.config.schema')"
      alias="$(echo "$generated_model" | jq -r '.meta.config.alias')"
      model_sql="$(echo "$generated_model" | jq -r '.model_sql')"
      schema_yaml="$(echo "$generated_model" | jq -r '.schema_yaml')"

      # Save a model
      model_path="${dbt_models_dir:?}/${database_alias:?}/${schema:?}/${alias:?}"
      model_file="${name}.sql"
      schema_file="schema.yml"
      echo "create ${model_path}"
      echo "create ${model_file}"
      mkdir -p "$model_path"
      echo "$model_sql" > "${model_path}/${model_file}"
      echo "$schema_yaml" > "${model_path}/${schema_file}"
    done

set -Eeuo pipefail
echo '::endgroup::'
